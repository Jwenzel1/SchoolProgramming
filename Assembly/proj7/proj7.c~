#include<stdio.h>
#include<stdbool.h>
#include <stdlib.h>
#include <string.h>

typedef struct student
{
  int id;
  double gpa;
} STUDENT;

//Takes in a pointer to a double and prints it out in the correct format
void printDouble(void * d)
{
  printf("Value:%.1f,", *(double *)d);
}

//Takes in a pointer to a student struct and prints out the fields
void printStudent(void * s)
{
  printf("id:%d,gpa:%.1f,", (*(STUDENT *)s).id, (*(STUDENT *)s).gpa);
}

//Takes in a pointer to a pointer to a student and prints out its fields
void printStudentPtr(void  * s)
{
  printf("id:%d,gpa:%.1f,", (**((STUDENT **)s)).id, (**((STUDENT **)s)).gpa);
}

//Prints out the given array with the given callback function
void showValues(void * base, int nElem, int sizeofEachElem, void (*fptr)(void *))
{
  int i;
  for(i = 0; i < nElem; i++){
    fptr(base + (sizeofEachElem * i));
    if((i+1)%5 == 0){
      printf("\n");
    }
  }
}

//Compares two doubles to see if the first one is greater than the second one
//Returns true if v1 is greater than v2 and false otherwise
bool cmpDouble (void *v1, void *v2)
{
  if((*(double *)v1 - *(double *)v2) > 0){
    return true;
  }
  return false;
}

//compares two students' ids. returns true is v1 is greater than v2 and
//false otherwise
bool cmpStudent (void *v1, void *v2)
{
  if(((*(STUDENT *)v1).id - (*(STUDENT *)v2).id) > 0){
    return true;
  }
  return false;
}

//Takes in two pointers to pointers of students and compares their id fields.
//Returns true if v1 is greater than v2 and false otherwise.
bool cmpStudentPtr (void *v1, void *v2)
{
  if((**((STUDENT **)v1)).id - (**((STUDENT **)v2)).id > 0){
    return true;  
  }
  return false;
}

//Sorts the given arrays with the given compare functions. This sort
//uses selection sort so it will print out every time a swap is made
//with the sort.
void selectionSort(void * base, int nElem, int sizeofEachElem, bool (*cmp)(void *, void *), void (*fptr)(void *))
{
  int i,j = 0; //These variables are needed in the loops in the sort
  int iMin = 0; //This is the initial min value
  char temp[sizeofEachElem]; //temp array to store the thing i need to swap
  for(i = 0; i < nElem - 1; i++){
    iMin = i; //assume the min index is i
    for(j = i + 1; j < nElem; j++){
      if(cmp(base + (sizeofEachElem * j),  base + (sizeofEachElem * iMin)) == false){
	iMin = j; //is you find a new min save its index
      }
    }
     
    if(iMin != i){ //if iMin doesnt equal i after the loop completes then 
                   //we need to perform a swap
      memcpy(temp, base + (sizeofEachElem * i), sizeofEachElem); //save in temp
      memcpy(base + (sizeofEachElem * i), base + (sizeofEachElem * iMin), sizeofEachElem);
      memcpy(base + (sizeofEachElem * iMin), temp, sizeofEachElem);
      showValues(base, nElem, sizeofEachElem, fptr);
      printf("\n");
    } 
  }
}

//Takes in and array of student pointers and frees them
void freeHeapMem(STUDENT ** ptr, int size)
{
  int i;
  for(i = 0; i < size; i++){
    free(ptr[i]);
  }
}


int main(int argC, char * argV[])
{

  // seed value provided as command-line arg.
  srand(atoi(argV[1]));

  // rand % 8 just evaluates to an int from 0 to 7, gets added to num < 1 to get a "random" double

  double myDouble []={ rand()%8 + .2, rand()%8 +  .3, rand()%8 +  .7, rand()%8 +  .5, rand()%8 +  .6,
                       rand()%8 + .4, rand()%8 +  .1, rand()%8 +  .2, rand()%8 +  .3, rand()%8 +  .4};




  // produce "random" student info
  STUDENT sArray [] ={ {rand()%1000, rand()%4 + .3}, {rand()%1000, rand()%4 + .9}, {rand()%1000, rand()%4 + .5}, {rand()%1000, rand()%4 + .7},
                       {rand()%1000, rand()%4 + .1}, {rand()%1000, rand()%4 + .8}, {rand()%1000, rand()%4 + .5}, {rand()%1000, rand()%4 + .9},
                       {rand()%1000, rand()%4 + .3}, {rand()%1000, rand()%4 + .7}};



 
  STUDENT * ptrArray[10];

  int i;
  for(i =0; i <10; i++)
    {
      ptrArray[i] = (STUDENT *)malloc(sizeof(STUDENT));
      ptrArray[i]-> id = sArray[i].id  + 1;
      ptrArray[i]->gpa = sArray[i].gpa + .1;

    }

  printf("---------------------------------------\n");
  printf("Print index 5 of each array\n");
  printDouble(&myDouble[5]);
  printStudent(&sArray[5]);
  printStudentPtr(&ptrArray[5]);

  printf("\n---------------------------------------\n");
  printf("Print all elements by calling the showValues on myDouble\n");
  showValues(myDouble, 10, sizeof(double), &printDouble);
  printf("\n---------------------------------------\n");
  printf("Print all elements by calling the showValues on printStudent\n");
  showValues(sArray, 10, sizeof(STUDENT), &printStudent);
  printf("\n---------------------------------------\n");
  printf("Print all elements by calling the showValues on printStudentPtr\n");
  showValues(ptrArray, 10, sizeof(STUDENT *), &printStudentPtr);
    
  printf("\n---------------------------------------\n");
  printf("Selection Sort on myDouble\n");
  selectionSort(myDouble, 10, sizeof(double), &cmpDouble, &printDouble);


  printf("\n---------------------------------------\n");
  
  printf("Selection Sort on sArray\n");
  selectionSort(sArray, 10, sizeof(STUDENT), &cmpStudent, &printStudent);


  printf("\n---------------------------------------\n");
  printf("Selection Sort on ptrArray\n");
  selectionSort(ptrArray, 10, sizeof(STUDENT *), &cmpStudentPtr, &printStudentPtr);

  freeHeapMem(ptrArray, 10);

  return 0;

}
